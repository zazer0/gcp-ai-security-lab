import { test, expect } from '@playwright/test';
import { TEST_CONFIG, EXPECTED_VALUES, API_ENDPOINTS, EXPECTED_API_RESPONSES } from './utils/test-data';
import { APIClient } from './utils/api-client';

test.describe('Module 1: Portal Discovery Flow', () => {
  test.beforeEach(async ({ page }) => {
    const portalUrl = TEST_CONFIG.portalUrl;
    console.log(`Navigating to CloudAI Portal at: ${portalUrl}`);
    await page.goto(portalUrl);
  });

  test('should load CloudAI portal homepage', async ({ page }) => {
    // Verify homepage loads
    await expect(page).toHaveTitle(/CloudAI Labs/);
    
    // Check for main heading
    await expect(page.locator('h1')).toContainText('CloudAI Labs');
    
    // Verify key sections are present
    await expect(page.locator('h3:has-text("Model Hosting")')).toBeVisible();
    await expect(page.locator('text=View API Documentation')).toBeVisible();
  });

  test('should expose bucket names in API documentation', async ({ page }) => {
    // Navigate to API documentation
    await page.goto(`${TEST_CONFIG.portalUrl}${API_ENDPOINTS.docs}`);
    
    // Verify we're on the docs page
    await expect(page.locator('h2')).toContainText('API Documentation');
    
    // Check for exposed dev bucket name
    const devBucketText = `gs://${EXPECTED_VALUES.devBucketName}`;
    await expect(page.locator(`text=${devBucketText}`)).toBeVisible();
    
    // Check for exposed prod bucket name
    const prodBucketText = `gs://${EXPECTED_VALUES.prodBucketName}`;
    await expect(page.locator(`text=${prodBucketText}`)).toBeVisible();
    
    // Verify gsutil commands are shown
    await expect(page.locator('pre:has-text("gsutil cp")')).toBeVisible();
    
    // Check for model deployment guide section
    await expect(page.locator('text=Model Deployment Guide')).toBeVisible();
    await expect(page.locator('text=Development Models')).toBeVisible();
    await expect(page.locator('text=Production Deployment')).toBeVisible();
  });

  test('should reveal sensitive information in API docs', async ({ page }) => {
    await page.goto(`${TEST_CONFIG.portalUrl}${API_ENDPOINTS.docs}`);
    
    // Check API endpoint is exposed
    const apiEndpoint = `https://${TEST_CONFIG.region}-${TEST_CONFIG.projectId}.cloudfunctions.net/cloudai-portal/api/v1/`;
    await expect(page.locator(`text=${apiEndpoint}`).first()).toBeVisible();
    
    // Verify authentication instructions reveal API key header
    await expect(page.locator('pre:has-text("X-API-Key: your-api-key")').first()).toBeVisible();
    
    // Check for code examples that might leak information
    await expect(page.locator('text=Python Client')).toBeVisible();
    const codeExample = page.locator('pre:has-text("import requests")');
    await expect(codeExample).toBeVisible();
    
    // Verify security warning exists but doesn't prevent disclosure
    await expect(page.locator('text=Security Note')).toBeVisible();
  });

  test('should display portal info linking to other modules', async ({ page }) => {
    await page.goto(`${TEST_CONFIG.portalUrl}${API_ENDPOINTS.docs}`);
    
    // Look for references to other features that might be exploitable
    const baseUrl = TEST_CONFIG.portalUrl;
    
    // Check if portal URLs are mentioned
    const portalFeatures = [
      { path: '/docs', description: 'API Documentation' },
      { path: '/status', description: 'System Status' },
      { path: '/monitoring', description: 'Monitoring Dashboard' },
      { path: '/admin', description: 'Admin Console' }
    ];
    
    // Navigate back to homepage to check features
    await page.goto(TEST_CONFIG.portalUrl);
    
    for (const feature of portalFeatures) {
      const link = page.locator(`a[href="${feature.path}"]`);
      if (await link.count() > 0) {
        await expect(link.first()).toBeVisible();
        console.log(`Found link to ${feature.description} at ${feature.path}`);
      }
    }
  });

  test('should allow unauthenticated access to public endpoints', async ({ page }) => {
    // Test that /docs is publicly accessible
    const docsResponse = await page.goto(`${TEST_CONFIG.portalUrl}${API_ENDPOINTS.docs}`);
    expect(docsResponse?.status()).toBe(200);
    
    // Test that /status is publicly accessible
    const statusResponse = await page.goto(`${TEST_CONFIG.portalUrl}${API_ENDPOINTS.status}`);
    expect(statusResponse?.status()).toBe(200);
    
    // Test that /monitoring is publicly accessible
    const monitoringResponse = await page.goto(`${TEST_CONFIG.portalUrl}${API_ENDPOINTS.monitoring}`);
    expect(monitoringResponse?.status()).toBe(200);
  });
});